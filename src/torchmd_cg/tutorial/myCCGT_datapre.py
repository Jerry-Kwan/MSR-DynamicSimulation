import os
import shutil
import numpy as np
import pandas as pd
import yaml
from tqdm import tqdm
from scipy.optimize import curve_fit
from moleculekit.molecule import Molecule
from moleculekit.projections.metricrmsd import MetricRmsd

import matplotlib.pyplot as plt
import seaborn as sns

sns.set_style("whitegrid")

# used to store files generated by this python script
path2 = './data2/'

if os.path.exists(path2):
    shutil.rmtree(path2)
    print(os.path.exists(path2))

os.makedirs(path2)

from torchmd_cg.utils.psfwriter import pdb2psf_CA

PDB_file = 'data/chignolin_cln025.pdb'
PSF_file = f'{path2}/chignolin_ca_top.psf'

pdb2psf_CA(PDB_file, PSF_file, bonds=True, angles=False)

mol = Molecule(f'{path2}/chignolin_ca_top.psf')
arr = np.load('data/chignolin_ca_coords.npy')
mol.coords = np.moveaxis(arr, 0, -1)

priors = {}
priors['atomtypes'] = list(set(mol.atomtype))
priors['bonds'] = {}
priors['lj'] = {}
priors['electrostatics'] = {at: {'charge': 0.0} for at in priors['atomtypes']}
priors['masses'] = {at: 12.0 for at in priors['atomtypes']}

from torchmd_cg.utils.prior_fit import get_param_bonded

T = 350  # K
fit_range = [3.55, 4.2]

bond_params = get_param_bonded(mol, fit_range, T)

priors['bonds'] = bond_params

from torchmd_cg.utils.prior_fit import get_param_nonbonded

fit_range = [3, 6]

nonbond_params = get_param_nonbonded(mol, fit_range, T)

priors['lj'] = nonbond_params

with open(f'{path2}/chignolin_priors.yaml', 'w') as f:
    yaml.dump(priors, f)

from torchmd_cg.utils.make_deltaforces import make_deltaforces

coords_npz = 'data/chignolin_ca_coords.npy'
forces_npz = 'data/chignolin_ca_forces.npy'
delta_forces_npz = f'{path2}/chignolin_ca_deltaforces.npy'
forcefield = f'{path2}/chignolin_priors.yaml'
psf = f'{path2}/chignolin_ca_top.psf'
exclusions = ('bonds')
device = 'cpu'
forceterms = ['Bonds', 'RepulsionCG']

make_deltaforces(coords_npz, forces_npz, delta_forces_npz, forcefield, psf, exclusions, device, forceterms)

AA2INT = {
    'ALA': 1,
    'GLY': 2,
    'PHE': 3,
    'TYR': 4,
    'ASP': 5,
    'GLU': 6,
    'TRP': 7,
    'PRO': 8,
    'ASN': 9,
    'GLN': 10,
    'HIS': 11,
    'HSD': 11,
    'HSE': 11,
    'SER': 12,
    'THR': 13,
    'VAL': 14,
    'MET': 15,
    'CYS': 16,
    'NLE': 17,
    'ARG': 18,
    'LYS': 19,
    'LEU': 20,
    'ILE': 21
}

emb = np.array([AA2INT[x] for x in mol.resname], dtype='<U3')
np.save(f'{path2}/chignolin_ca_embeddings.npy', emb)
