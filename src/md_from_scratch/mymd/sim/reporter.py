import csv
import os
import time


class Reporter(object):
    """Base class for Reporter.

    Used for future extension.
    """

    def __init__(self):
        pass


class CSVReporter(Reporter):
    """CSVReporter."""

    def __init__(self,
                 path,
                 report_interval,
                 file_name='log.csv',
                 step=True,
                 ns=True,
                 e_pot=True,
                 e_kin=True,
                 e_tot=True,
                 T=True):
        """Create a CSVReporter.

        Parameters
        ----------
        path : str
            The directory to the csv file.
        report_interval : int
            The interval (in the number of steps) at which to write frames.
        """
        super().__init__()

        self.keys = []

        self.step = step
        if step:
            self.keys.append('step')

        self.ns = ns
        if ns:
            self.keys.append('ns')

        self.e_pot = e_pot
        if e_pot:
            self.keys.append('e_pot')

        self.e_kin = e_kin
        if e_kin:
            self.keys.append('e_kin')

        self.e_tot = e_tot
        if e_tot:
            self.keys.append('e_tot')

        self.T = T
        if T:
            self.keys.append('T')

        self.keys.append('time_cost_so_far')

        os.makedirs(path, exist_ok=True)
        file_name = os.path.join(path, file_name)
        if os.path.exists(file_name):
            print('Remove the original csv file.')
            os.remove(file_name)

        self.file = open(file_name, 'w')
        self.logger = csv.DictWriter(self.file, fieldnames=self.keys)
        self.logger.writeheader()
        self.file.flush()

        self.time_start = time.time()
        self.report_interval = report_interval

    def write_row(self, info):
        """Write a row to csv file.

        Parameters
        ----------
        info : dict
            A dict containing all the infomation generated by simulation object. Filter it and write to
            the csv file is the duty of this method.
            To see the format of the dict given by simulation object, see Simulation.step().
        """
        info_write = dict()

        diff = time.time() - self.time_start
        info_write['time_cost_so_far'] = diff

        if self.step:
            info_write['step'] = info['step']

        if self.ns:
            info_write['ns'] = info['ns']
        
        if self.e_pot:
            info_write['e_pot'] = info['e_pot']
        
        if self.e_kin:
            info_write['e_kin'] = info['e_kin']
        
        if self.e_tot:
            info_write['e_tot'] = info['e_tot']
        
        if self.T:
            info_write['T'] = info['T']

        self.logger.writerow(info_write)
        self.file.flush()
